<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL&amp;LeetCode_001</title>
      <link href="/2022/04/12/SQL/mysql_02/"/>
      <url>/2022/04/12/SQL/mysql_02/</url>
      
        <content type="html"><![CDATA[<h2 id="1873-计算特殊奖金"><a href="#1873-计算特殊奖金" class="headerlink" title="1873. 计算特殊奖金"></a>1873. 计算特殊奖金</h2><p>题目图片如下：<br><img src="/img/LeetCode/leetcode001.jpg" alt="题目"></p><p>MySQL代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> employee_id,</span><br><span class="line">    if(</span><br><span class="line">        employee_id<span class="operator">%</span><span class="number">2</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">&#x27;M%&#x27;</span>,</span><br><span class="line">        salary,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    ) <span class="keyword">as</span> bonus</span><br><span class="line"><span class="keyword">from</span> Employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> employee_id;</span><br></pre></td></tr></table></figure><p>另外附上关于MySQL的if语句的三种用法<a href="https://blog.csdn.net/weixin_45659364/article/details/115468039">链接</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的limit与offset</title>
      <link href="/2022/04/02/SQL/mysql_01/"/>
      <url>/2022/04/02/SQL/mysql_01/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL中的limit与offset"><a href="#MySQL中的limit与offset" class="headerlink" title="MySQL中的limit与offset"></a>MySQL中的limit与offset</h2><p>首先看以下两条MySQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> student limit <span class="number">1</span>,<span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> student limit <span class="number">2</span> <span class="keyword">offset</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>当然熟悉<code>MySQL</code>的人应该知道以上语句实现的内容一样</p><p>为何一样呢？</p><blockquote><p>首先我们先来了解以下limit与offset</p></blockquote><h2 id="只有limit时"><a href="#只有limit时" class="headerlink" title="只有limit时"></a>只有limit时</h2><ul><li>只有一个参数时</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> student limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>这一句的意思是直接取所有name中的前3条数据。</p><ul><li>有两个参数时</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> student limit <span class="number">1</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>这句sql含义是跳过1条数据取3条数据.</p><h2 id="limit与offset同时出现"><a href="#limit与offset同时出现" class="headerlink" title="limit与offset同时出现"></a>limit与offset同时出现</h2><blockquote><p>这种情况时只有一种sql语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> student limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>这句sql表示的是跳过3语句，从第四条记录开始取1条记录。</p><p>以上<code>MySQL</code>用法一般用于分页，配合<code>order by</code>只用</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题篇(4)-二倍数对数组</title>
      <link href="/2022/04/01/leetcode/LeetCode(4)/"/>
      <url>/2022/04/01/leetcode/LeetCode(4)/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode刷题篇-4-二倍数对数组"><a href="#LeetCode刷题篇-4-二倍数对数组" class="headerlink" title="LeetCode刷题篇(4)-二倍数对数组"></a>LeetCode刷题篇(4)-二倍数对数组</h2><hr><p><a href="https://leetcode-cn.com/problems/array-of-doubled-pairs/">题目链接</a></p><p>给定一个长度为偶数的整数数组 <code>arr</code>，只有对 <code>arr</code> 进行重组后可以满足 “对于每个 <code>0 &lt;= i &lt; len(arr) / 2</code>，都有 <code>arr[2 * i + 1] = 2 * arr[2 * i]</code>” 时，返回<code>true</code>；否则，返回 <code>false</code>。</p><p>这道题刚开始想着暴力来做用next_permutation()来暴力，可惜这如果暴力下去肯定超时；故采用哈希表来做</p><ul><li>首先哈希表适用于这种存储有负数的数组，且需要统计数量的操作。</li><li>其次这道题本身就是找出一个数是另一个数的两倍，并且成对成对出现。</li></ul><p>题解：<br>故首先对数组中的数计算每个数的数量，用哈希表存储。</p><p>哈希表的<code>key==0</code>时，<code>value</code>必须为偶数，因为一旦不为偶数则造成0冗余，则返回<code>false</code></p><p>再将哈希表的key用普通数组存储，并且对key的绝对值进行排序，排序后就可以对哈希表进行检索成对出现。</p><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canReorderDoubled</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; um;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;</span><br><span class="line">            ++um[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(um[<span class="number">0</span>] % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vc</span><span class="params">(um.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[x,_] : um)&#123;</span><br><span class="line">            vc.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(vc.<span class="built_in">begin</span>(),vc.<span class="built_in">end</span>(),[](<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123; <span class="keyword">return</span> <span class="built_in">abs</span>(a) &lt; <span class="built_in">abs</span>(b);&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:vc)&#123;</span><br><span class="line">            <span class="keyword">if</span>(um[<span class="number">2</span>*x] &lt; um[x]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            um[<span class="number">2</span>*x] -= um[x];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯刷题_08_砝码称重</title>
      <link href="/2022/03/31/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_08/"/>
      <url>/2022/03/31/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_08/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯刷题-08-砝码称重"><a href="#蓝桥杯刷题-08-砝码称重" class="headerlink" title="蓝桥杯刷题_08_砝码称重"></a>蓝桥杯刷题_08_砝码称重</h2><hr><p><a href="https://note.youdao.com/">题目链接</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>一共有N个砝码，每个砝码都有对应的重量，砝码之间可以相互组合一共可以称出多少种重量的物品？</p><p>这道题一看就是用<strong>集合</strong>做，但是一开始只想到<strong>暴力</strong><br>后来看了人家写的题解后才明白咋做。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">in:</span><br><span class="line">3</span><br><span class="line">1 4 6</span><br><span class="line">out:</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">in:</span><br><span class="line">5</span><br><span class="line">1 6 9 8 5</span><br><span class="line">out:</span><br><span class="line">27</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先每个砝码都应该加入到集合去，然后遍历集合，与当前加入的砝码相比较</p><ul><li>不相等-&gt; 加入两数之差的绝对值进入集合</li><li>相等-&gt; 不做改变，以免0加入集合，0是无效值</li></ul><p>并且每次都要将两数之和加入到集合中去<br>这里注意的主要是加入之前，将集合的数遍历出来用vector存储<br>然后利用vector去遍历并插入相应的数到集合去，这是为了避免内存出错。</p><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; ::iterator it;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,sum=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(it = s1.<span class="built_in">begin</span>();it!=s1.<span class="built_in">end</span>();it++)&#123;<span class="comment">//将集合的数取出 </span></span><br><span class="line">v1.<span class="built_in">push_back</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v1.<span class="built_in">size</span>();i++)&#123;<span class="comment">//遍历集合的数 </span></span><br><span class="line"><span class="keyword">if</span>(v1[i] != t) s1.<span class="built_in">insert</span>(<span class="built_in">abs</span>(v1[i] - t));</span><br><span class="line">s1.<span class="built_in">insert</span>(v1[i] + t);</span><br><span class="line">&#125;</span><br><span class="line">s1.<span class="built_in">insert</span>(t);<span class="comment">//当前砝码插入 </span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;s1.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯刷题_07_回文日期</title>
      <link href="/2022/03/31/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_07/"/>
      <url>/2022/03/31/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_07/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯刷题-07-回文日期"><a href="#蓝桥杯刷题-07-回文日期" class="headerlink" title="蓝桥杯刷题_07_回文日期"></a>蓝桥杯刷题_07_回文日期</h2><p><a href="http://lx.lanqiao.cn/problem.page?gpid=T2855">题目链接</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>2020年春节期间，有一个特殊的日期引起了大家的注意:2020年2月2日。因为如果将这个日期按“<code>yyyymmdd</code>”的格式写成一个8位数是<code>20200202</code>,恰好是一个回文数。我们称这样的日期是回文日期。</p><p>有人表示<code>20200202</code>是“千年一遇”的特殊日子。对此小明很不认同，因为不到2年之后就是下一个回文日期:<code>20211202</code>即2021年12月2日。</p><p>也有人表示<code>20200202</code>并不仅仅是一个回文日期，还是一个<code>ABABBABA</code>型的回文日期。对此小明也不认同，因为大约100年后就能遇到下一个<code>ABABBABA</code>型的回文日期: <code>21211212</code>即2121年 12月12日。算不上“千年一遇”，顶多算“千年两遇”。<br>给定一个8位数的日期，请你计算该日期之后下一个回文日期和下一个<code>ABABBABA</code>型的回文日期各是哪一天。</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input:</span><br><span class="line">20200202</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">20211202</span><br><span class="line">21211212</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题很简单，数据范围都不大，对每一天进行遍历即可得到所需要的日期，但是以防忘了怎么根据闰年计算的，把代码放在这多看看就行。</p><p>C++代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">20200202</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">20211202</span></span><br><span class="line"><span class="comment">21211212</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">12</span>] = &#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,N1,yy=<span class="number">0</span>,mm=<span class="number">0</span>,dd=<span class="number">0</span>,n2=<span class="number">0</span>,n3=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag1=<span class="literal">false</span>,flag2=<span class="literal">false</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">yy = n/<span class="number">10000</span>;</span><br><span class="line">mm = (n/<span class="number">100</span>)%<span class="number">100</span>;</span><br><span class="line">dd = n%<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">dd++;</span><br><span class="line"><span class="keyword">if</span>(yy%<span class="number">400</span> == <span class="number">0</span> || (yy%<span class="number">4</span> == <span class="number">0</span> &amp;&amp; yy%<span class="number">100</span> !=<span class="number">0</span>))&#123;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">29</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dd &gt; a[mm<span class="number">-1</span>])&#123;</span><br><span class="line">mm++;</span><br><span class="line">dd = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mm &gt; <span class="number">12</span>)&#123;</span><br><span class="line">yy++;</span><br><span class="line">mm = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(yy/<span class="number">1000</span> == dd%<span class="number">10</span> &amp;&amp; (yy/<span class="number">100</span>)%<span class="number">10</span> == dd/<span class="number">10</span> &amp;&amp; (yy/<span class="number">10</span>)%<span class="number">10</span> == mm%<span class="number">10</span> &amp;&amp; yy%<span class="number">10</span> == mm/<span class="number">10</span> &amp;&amp; !flag1)&#123;</span><br><span class="line">flag1 = <span class="literal">true</span>;</span><br><span class="line">n2 = yy*<span class="number">10000</span>+mm*<span class="number">100</span>+dd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(yy/<span class="number">100</span> == yy%<span class="number">100</span> &amp;&amp; mm == dd &amp;&amp; yy/<span class="number">1000</span> == dd%<span class="number">10</span> &amp;&amp; (yy/<span class="number">100</span>)%<span class="number">10</span> == dd/<span class="number">10</span> &amp;&amp; !flag2)&#123;</span><br><span class="line">flag2 = <span class="literal">true</span>;</span><br><span class="line">n3 = yy*<span class="number">10000</span>+mm*<span class="number">100</span>+dd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag1 &amp;&amp; flag2)&#123;</span><br><span class="line">cout&lt;&lt;n2&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;n3;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯刷题_06_直线</title>
      <link href="/2022/03/31/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_06/"/>
      <url>/2022/03/31/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_06/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯刷题-06-直线"><a href="#蓝桥杯刷题-06-直线" class="headerlink" title="蓝桥杯刷题_06_直线"></a>蓝桥杯刷题_06_直线</h2><p><a href="https://icpc.ldu.edu.cn/contest/2357/problem/1">题目链接</a></p><p>这道题目是一道填空题<br>题目大意就是空间直角坐标系里面有很多个点，然后这些点两两相连一共有多少条直线（重复的只算一条）</p><p>这道题目第一次没做出来，是没想到斜率截距这方面的数学知识，后面看别的题解才出来</p><p>主要是根据每两点连成的直线的斜率和截距插入到数组中，如果数组中已经存在这条直线则不计算这条线。</p><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125;point[<span class="number">30</span>*<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line">map&lt;pair&lt;<span class="keyword">double</span>,<span class="keyword">double</span>&gt;,<span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">21</span>;j++)&#123;</span><br><span class="line">point[cnt].x = i;</span><br><span class="line">point[cnt].y = j;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">41</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(point[i].x == point[j].x || point[i].y == point[j].y)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> x = (point[j].y - point[i].y)/(point[j].x - point[i].x);</span><br><span class="line"><span class="keyword">double</span> y = (point[i].y*point[j].x - point[j].y*point[i].x)/(point[j].x - point[i].x);</span><br><span class="line"><span class="keyword">if</span>(m[&#123;x,y&#125;] == <span class="number">0</span>)&#123;</span><br><span class="line">m[&#123;x,y&#125;] = <span class="number">1</span>;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯刷题_05_纯质数</title>
      <link href="/2022/03/29/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_05/"/>
      <url>/2022/03/29/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_05/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯刷题-05-纯质数"><a href="#蓝桥杯刷题-05-纯质数" class="headerlink" title="蓝桥杯刷题_05_纯质数"></a>蓝桥杯刷题_05_纯质数</h2><hr><p><a href="https://icpc.ldu.edu.cn/contest/2361/problem/0">题目链接</a></p><p><strong><em>知识点</em>：线性筛(必背)</strong></p><p>如果一个正整数只有 1 和它本身两个约数，则称为一个质数（又称素数）。</p><p>前几个质数是：2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, · · · 。</p><p>如果一个质数的所有十进制数位都是质数，我们称它为纯质数。例如：2,3, 5, 7, 23, 37 都是纯质数，而 11, 13, 17, 19, 29, 31 不是纯质数。当然 1, 4, 35也不是纯质数。</p><p>请问，在 1 到 20210605 中，有多少个纯质数？</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20210610</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ispri[maxn];<span class="comment">//素数为0，否则为1</span></span><br><span class="line"><span class="keyword">int</span> pri[maxn];<span class="comment">//存素数</span></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!ispri[n%<span class="number">10</span>])&#123;</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(ispri,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(ispri));</span><br><span class="line">ispri[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">ispri[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ispri[i] == <span class="number">0</span>) &#123;</span><br><span class="line">pri[++cnt] = i;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(i)) sum++;<span class="comment">//筛素数的每一位是否为素数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp; i*pri[j] &lt;= n;j++)&#123;<span class="comment">//筛所有素数的i倍数</span></span><br><span class="line">ispri[i*pri[j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i % pri[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">20210605</span>);</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯刷题_04_平面切分</title>
      <link href="/2022/03/29/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_04/"/>
      <url>/2022/03/29/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_04/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯刷题-04-平面切分"><a href="#蓝桥杯刷题-04-平面切分" class="headerlink" title="蓝桥杯刷题_04_平面切分"></a>蓝桥杯刷题_04_平面切分</h2><hr><p><a href="http://lx.lanqiao.cn/problem.page?gpid=T798###">题目链接</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>平面上有N条线，给出每条直线的斜率和截距，求出这个平面被划分成多少块？</p><p>这道题主要解法就是找<strong>规律</strong>！</p><ul><li><p>当平面只有一条线时，平面被划分成2块</p></li><li><p>当平面有两条线时</p><ul><li>第二条线与第一条线<strong>平行</strong>时，平面被划分成3块</li><li>第二条线与第一条线<strong>重合</strong>时，划分不影响</li><li>第二条线与第一条线<strong>相交</strong>时，平面划分成4块</li></ul></li><li><p>当平面有三条线时，在前面两条线的基础上</p><ul><li><p>与前面两条线<strong>平行</strong>，平面划分块数+1</p></li><li><p>与前面两条线<strong>重合</strong>，不变</p></li><li><p>与前面两条线<strong>相交</strong></p><ul><li>相交点重合，4(原来)+2</li><li>相交点不重合，4(原来)+2+1<br>…</li></ul></li></ul></li></ul><p>以此规律下去，对重合的不考虑，以及平行情况另外加一，相交情况则判断当前线i与前面i-1条线的相交情况，根据相交点不重合数进行考虑。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ld,ld&gt; p; </span><br><span class="line"></span><br><span class="line">set&lt;p&gt; s1,s2;</span><br><span class="line">set&lt;p&gt; ::iterator it;</span><br><span class="line">ld A[<span class="number">1005</span>],B[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(a,b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,it=s1.<span class="built_in">begin</span>();it!=s1.<span class="built_in">end</span>();it++,i++)&#123;</span><br><span class="line">A[i] = (*it).first;</span><br><span class="line">B[i] = (*it).second;</span><br><span class="line">&#125;</span><br><span class="line">ll ans = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;s1.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i] == A[j]) <span class="keyword">continue</span>;</span><br><span class="line">ld p1 = (B[i] - B[j])/(A[j] - A[i]);</span><br><span class="line">ld p2 = (A[j]*B[i] - A[i]*B[j])/(A[j] - A[i]);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(p1,p2));</span><br><span class="line">&#125;</span><br><span class="line">ans += s2.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">s2.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯刷题_03_子串分值和</title>
      <link href="/2022/03/29/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_03/"/>
      <url>/2022/03/29/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_03/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯刷题-03-子串分值和"><a href="#蓝桥杯刷题-03-子串分值和" class="headerlink" title="蓝桥杯刷题_03_子串分值和"></a>蓝桥杯刷题_03_子串分值和</h2><hr><p><a href="http://lx.lanqiao.cn/problem.page?gpid=T793">题目链接</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>对于一个字符串<code>s</code>，我们定义<code>s</code>的分值为<code>f(s)</code>为<code>s</code> 中出现的不同的字符个数。例如<code>f(&quot;aba&quot;)=2</code>,<code>f(&quot;abc&quot;)=3</code>,<code>f(&quot;aaa&quot;)=1</code>。</p><p>现在给定一个字符串<code>s[0,1...n-1]</code>（长度为<code>n</code>），请你计算对于所有<code>s</code>的非空子串<code>s[i...j](0&lt;=i&lt;=j&lt;n)</code>,请你计算<code>f(s[i...j])</code>的和是多少。</p><p>一看到题目，首先想到的是暴力</p><h2 id="1-暴力-只能过60"><a href="#1-暴力-只能过60" class="headerlink" title="1.暴力(只能过60%)"></a>1.暴力(只能过60%)</h2><ul><li>对于所有的子串，两重循环遍历出结果，每次循环，记录字母表的数量，统计不为0的字母个数，再求和。</li></ul><p>但是很可惜，数据量很大，对于60%的数据量(n&lt;=10000)是可以过的，但是后面的数据太大直接爆。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);<span class="comment">//每次循环前清空字母表计数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">dp[s[j] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">0</span>;z&lt;<span class="number">26</span>;z++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[z] !=<span class="number">0</span>) sum++;<span class="comment">//字母数量不为0则计数</span></span><br><span class="line">&#125;</span><br><span class="line">ans+=sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="2-贡献值法"><a href="#2-贡献值法" class="headerlink" title="2.贡献值法"></a>2.贡献值法</h2><p>这个解法很特别，只需要理解这个题目的意思，按照意思得出公式即可</p><p>对于一个<code>s[i]</code>，<code>dp</code>是记录字符的出现的下标，<code>s</code>是整个字符串，<code>n</code>为整个字符串的长度:</p><ul><li><code>s[i]</code>是一个整个字符串中这个字符第一个出现的字符，那么这个字符对左边的左右字符都有贡献值<code>1</code>，且对右边所有字符也都有贡献值<code>1</code>.故此时这个字符的贡献值就是<code>(i-dp[s[i] - &#39;a&#39;]) * (n - i + 1)</code>.</li><li><code>s[i]</code>不是第一次出现的字符，则该字符对左边的贡献值则为上一次该字符出现的下标为起点，到该字符现在的下标的距离则为贡献值，同样该字符对右边的字符都有贡献值。</li></ul><p>C++代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">ll n = s.<span class="built_in">length</span>();</span><br><span class="line">s = <span class="string">&quot;0&quot;</span> + s;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans += (i-dp[s[i] - <span class="string">&#x27;a&#x27;</span>])*(n-i+<span class="number">1</span>);</span><br><span class="line">dp[s[i] - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s = sc.nextLine();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">long</span> n = s.length();</span><br><span class="line">        s = <span class="string">&quot;0&quot;</span> + s;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            ans += (i - dp[s.charAt(i)  - <span class="string">&#x27;a&#x27;</span>])*(n - i +<span class="number">1</span>);</span><br><span class="line">            dp[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题篇(3)-考试的最大困扰度</title>
      <link href="/2022/03/29/leetcode/LeetCode(3)/"/>
      <url>/2022/03/29/leetcode/LeetCode(3)/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode刷题篇-3-考试的最大困扰度"><a href="#LeetCode刷题篇-3-考试的最大困扰度" class="headerlink" title="LeetCode刷题篇(3)-考试的最大困扰度"></a>LeetCode刷题篇(3)-考试的最大困扰度</h2><p><a href="https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam/">题目链接</a></p><p>题目大意：<br>给你一个字符串，里面只有<code>T</code>或者<code>F</code>，然后给你一个操作次数<code>k</code><br>问：你可以使用<code>k</code>次修改字符串中的<code>T</code>或者<code>F</code>，把字符串换成<code>F</code>或者<code>T</code>，使得有一个最大的连续子串(连续是相同的<code>T</code>或者<code>F</code>)，并返回最大子串长度。</p><p>最开始是双重循环遍历整个字符串的所有子串，但是很遗憾题目字符串的长度上限是<code>5*1e4</code>,双重循环直接爆掉。</p><p><em><strong>错误代码</strong>：</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">100000</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxConsecutiveAnswers</span><span class="params">(string answerKey, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = answerKey.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span> maxl = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(answerKey[i<span class="number">-1</span>] == <span class="string">&#x27;T&#x27;</span>) dp[i] = dp[i<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(answerKey[i<span class="number">-1</span>] == <span class="string">&#x27;F&#x27;</span>) dp[i] = dp[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> t = k;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((j-i+<span class="number">1</span>-<span class="built_in">abs</span>(dp[j]-dp[i<span class="number">-1</span>]))/<span class="number">2</span> &lt;= t)&#123;</span><br><span class="line">                    maxl = <span class="built_in">max</span>(maxl,j-i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看了官方题解后用滑动窗口可以做出,开始时窗口右端点一直右移，遇到不等于当前所要替换的字符时，用<code>sum</code>计数，当替换次数大于<code>k</code>时，窗口左端点开始右移，遇到不等于替换的字符时，<code>sum-=1</code>，如此反复即可。</p><ul><li><strong>分别对T或者F进行查找替换成T或者F的最大子串长度</strong></li></ul><p>C++代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxLLL</span><span class="params">(string&amp; answerKey,<span class="keyword">int</span> k,<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxl = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = answerKey.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>,sum=<span class="number">0</span>;right&lt;n;right++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(answerKey[right] != ch) sum += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(sum&gt;k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(answerKey[left++] != ch) sum -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            maxl = <span class="built_in">max</span>(maxl,right-left+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxConsecutiveAnswers</span><span class="params">(string answerKey, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">maxLLL</span>(answerKey,k,<span class="string">&#x27;T&#x27;</span>),<span class="built_in">maxLLL</span>(answerKey,k,<span class="string">&#x27;F&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxLLL</span><span class="params">(String answerKey,<span class="keyword">int</span> k,<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = answerKey.length();</span><br><span class="line">        <span class="keyword">int</span> maxl = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>,sum=<span class="number">0</span>;right &lt; n;right++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(answerKey.charAt(right) != ch) sum++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(sum &gt; k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(answerKey.charAt(left++) != ch) sum--;</span><br><span class="line">            &#125;</span><br><span class="line">            maxl = Math.max(maxl,right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxConsecutiveAnswers</span><span class="params">(String answerKey, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxLLL(answerKey,k,<span class="string">&#x27;T&#x27;</span>),maxLLL(answerKey,k,<span class="string">&#x27;F&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯刷题_02_最小字符串</title>
      <link href="/2022/03/28/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_02/"/>
      <url>/2022/03/28/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_02/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯刷题-02-最小字符串"><a href="#蓝桥杯刷题-02-最小字符串" class="headerlink" title="蓝桥杯刷题_02_最小字符串"></a>蓝桥杯刷题_02_最小字符串</h2><hr><p><a href="http://lx.lanqiao.cn/problem.page?gpid=T3001">题目链接</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><strong>给定一些字符串(只包含小写字母)，要求将他们串起来构成一个字典序最小的字符串。</strong></p><p>这其实就是一个关于字符串的排序，<strong>但是</strong>，这个字符串排序不是简单的排序，如果你就傻乎乎的直接用库函数sort排序那就直接寄。</p><p>请看下面的样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ba</span><br><span class="line">b</span><br><span class="line">baba</span><br><span class="line">babb</span><br><span class="line">结果：</span><br><span class="line">bababababbb</span><br><span class="line">如果直接根据字符串排序则结果为：</span><br><span class="line">bbababababb</span><br></pre></td></tr></table></figure><p>这俩结果完全不一样的，所以这里需要<strong>自定义一个排序规则</strong><br>有两个字符串<code>s1</code>和<code>s2</code>,需要判断<code>s1+s2</code>与<code>s2+s1</code>的大小，从小到大排序。</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(string s1,string s2)</span></span>&#123;</span><br><span class="line">string s3 = s1+s2;</span><br><span class="line">string s4 = s2+s1;</span><br><span class="line"><span class="keyword">if</span>(s3&lt;s4) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,sum=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> a[n+<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(a[i] != i)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = a[a[i]];</span><br><span class="line">a[a[i]] = a[i];</span><br><span class="line">a[i] = tmp;</span><br><span class="line">sum++;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯刷题_01_交换瓶子</title>
      <link href="/2022/03/28/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_01/"/>
      <url>/2022/03/28/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao_01/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯刷题-01-交换瓶子"><a href="#蓝桥杯刷题-01-交换瓶子" class="headerlink" title="蓝桥杯刷题_01_交换瓶子"></a>蓝桥杯刷题_01_交换瓶子</h2><hr><p><a href="http://lx.lanqiao.cn/problem.page?gpid=T2770">题目链接</a></p><ul><li>题目大意：</li></ul><p>有编号1-&gt;N的瓶子，但瓶子顺序不是从小到大排布的，需要你计算最少交换多少次瓶子才能使瓶子编号从小到大排布。</p><p>这道题目的意思让人比较清晰，开始想着是冒泡排序的方法，但是后来感觉到不对，因为冒泡排序是每次都是相邻的，但是本题中交换<strong>不分相邻还是不相邻，只要求最少交换多少次</strong>。</p><p>所以本题题解应该是顺着第一个数和第一个数的下标开始交换，直到当前数和下标完全对应。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,sum=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> a[n+<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(a[i] != i)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = a[a[i]];</span><br><span class="line">a[a[i]] = a[i];</span><br><span class="line">a[i] = tmp;</span><br><span class="line">sum++;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论入门_01</title>
      <link href="/2022/03/27/%E8%93%9D%E6%A1%A5%E6%9D%AF/graph_01/"/>
      <url>/2022/03/27/%E8%93%9D%E6%A1%A5%E6%9D%AF/graph_01/</url>
      
        <content type="html"><![CDATA[<h2 id="图论入门"><a href="#图论入门" class="headerlink" title="图论入门"></a>图论入门</h2><hr><p><a href="https://icpc.ldu.edu.cn/contest/2357/problem/3">题目链接</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>1到2021一共2021个节点，任意两个节点之差的绝对值小于等于21则可以连通，且边权为两个数的最小公倍数。</p><p><strong>求1到2021距离最短多少？</strong></p><h3 id="解答题目"><a href="#解答题目" class="headerlink" title="解答题目"></a>解答题目</h3><p>这次题目涉及的是图论方面的基础知识，最近我只学了图的基础知识，仅仅只知道图分为有向图和无向图，很清楚的知道这次图是一个无向图，也就是两边都是连通的。</p><p>当然首先就是建图了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; p;</span><br><span class="line">vector&lt;p&gt; edg[<span class="number">2022</span>];<span class="comment">//保存两连通节点以及边权 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2021</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2021</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(i - j) &lt;= <span class="number">21</span>)&#123;</span><br><span class="line">ll w = (i*j)/__gcd(i,j);</span><br><span class="line">edg[i].<span class="built_in">push_back</span>(&#123;j,w&#125;);<span class="comment">//无向图,i与j互相连通 </span></span><br><span class="line">edg[j].<span class="built_in">push_back</span>(&#123;i,w&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次就是最短路的算法，这个算法最重要的就是不断的更新往后的路径，并且要求是最短的路径，并且标记已经访问过的节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[<span class="number">2022</span>];<span class="comment">//记录是否访问当前节点 </span></span><br><span class="line">ll dis[<span class="number">2022</span>];<span class="comment">//dis记录当前节点到节点1的最短距离 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">dis[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//1-&gt;1距离为0 </span></span><br><span class="line">vis[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//访问当前节点1 </span></span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line"><span class="keyword">int</span> u = q.<span class="built_in">front</span>();<span class="comment">//取队列头部-&gt;u </span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(p p1: edg[u])&#123;<span class="comment">//遍历与u连通的节点以及边权 </span></span><br><span class="line"><span class="keyword">int</span> to = p1.first;</span><br><span class="line">ll w = p1.second;</span><br><span class="line"><span class="keyword">if</span>(dis[to] &gt; dis[u] + w)&#123;<span class="comment">//距离1-&gt;to 大于 距离1-&gt;u 则更新距离 1-&gt;to </span></span><br><span class="line">dis[to] = dis[u] + w;</span><br><span class="line"><span class="keyword">if</span>(vis[to] == <span class="literal">false</span>)&#123;<span class="comment">//如果没有访问to则将to节点加入队列 </span></span><br><span class="line">q.<span class="built_in">push</span>(to);</span><br><span class="line">vis[to] = <span class="literal">true</span>;<span class="comment">//标记to节点为已访问 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体可以看代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; p;</span><br><span class="line">vector&lt;p&gt; edg[<span class="number">2022</span>];<span class="comment">//保存两连通节点以及边权 </span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2022</span>];<span class="comment">//记录是否访问当前节点 </span></span><br><span class="line">ll dis[<span class="number">2022</span>];<span class="comment">//dis记录当前节点到节点1的最短距离 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">dis[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//1-&gt;1距离为0 </span></span><br><span class="line">vis[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//访问当前节点1 </span></span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line"><span class="keyword">int</span> u = q.<span class="built_in">front</span>();<span class="comment">//取队列头部-&gt;u </span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(p p1: edg[u])&#123;<span class="comment">//遍历与u连通的节点以及边权 </span></span><br><span class="line"><span class="keyword">int</span> to = p1.first;</span><br><span class="line">ll w = p1.second;</span><br><span class="line"><span class="keyword">if</span>(dis[to] &gt; dis[u] + w)&#123;<span class="comment">//距离1-&gt;to 大于 距离1-&gt;u 则更新距离 1-&gt;to </span></span><br><span class="line">dis[to] = dis[u] + w;</span><br><span class="line"><span class="keyword">if</span>(vis[to] == <span class="literal">false</span>)&#123;<span class="comment">//如果没有访问to则将to节点加入队列 </span></span><br><span class="line">q.<span class="built_in">push</span>(to);</span><br><span class="line">vis[to] = <span class="literal">true</span>;<span class="comment">//标记to节点为已访问 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2021</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2021</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(i - j) &lt;= <span class="number">21</span>)&#123;</span><br><span class="line">ll w = (i*j)/__gcd(i,j);</span><br><span class="line">edg[i].<span class="built_in">push_back</span>(&#123;j,w&#125;);<span class="comment">//无向图,i与j互相连通 </span></span><br><span class="line">edg[j].<span class="built_in">push_back</span>(&#123;i,w&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> dis);<span class="comment">//初始化dis,设置一个大数 </span></span><br><span class="line"><span class="built_in">get</span>();</span><br><span class="line">cout&lt;&lt;dis[<span class="number">2021</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>特别鸣谢吴衍涛先生(<del>说了不算，算了不说之头号人物</del>)</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于JWT的token验证</title>
      <link href="/2022/03/27/JWT_01/"/>
      <url>/2022/03/27/JWT_01/</url>
      
        <content type="html"><![CDATA[<h2 id="基于JWT的token验证"><a href="#基于JWT的token验证" class="headerlink" title="基于JWT的token验证"></a>基于JWT的token验证</h2><p><strong>此博客更新待定…</strong><br><a href="https://www.jianshu.com/p/576dbf44b2ae">什么是 JWT – JSON WEB TOKEN</a><br><a href="https://www.cnblogs.com/fengzheng/p/8416393.html">常用登录验证方式</a><br><a href="https://www.bilibili.com/video/BV1i54y1m7cP?spm_id_from=333.337.search-card.all.click">JWT_B站精讲</a></p>]]></content>
      
      
      <categories>
          
          <category> 常见的登陆验证方式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
            <tag> 面试 </tag>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题篇(2)-最长回文子串</title>
      <link href="/2022/03/24/leetcode/LeetCode(2)/"/>
      <url>/2022/03/24/leetcode/LeetCode(2)/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode刷题篇-2-最长回文子串"><a href="#LeetCode刷题篇-2-最长回文子串" class="headerlink" title="LeetCode刷题篇(2)-最长回文子串"></a>LeetCode刷题篇(2)-最长回文子串</h2><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">链接</a></p><p><strong>重点是今天铭宇的小红书一面有考(2022/3/24)</strong></p><hr><p>题目：<br>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p><strong>首先这道题第一次做的时候是采用的一种暴力解法，很可惜啊，这题的数据长度刚好是1e3,O(n3)复杂度刚好就爆了。</strong></p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        string ms;</span><br><span class="line">        <span class="keyword">int</span> maxl = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;s.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                string p = s.<span class="built_in">substr</span>(i,j-i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">get</span>(p) &amp;&amp; p.<span class="built_in">size</span>() &gt; maxl)&#123;</span><br><span class="line">                    maxl = p.<span class="built_in">size</span>();</span><br><span class="line">                    ms = p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ms;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != s[j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重点来了，这道题目的主要解法就是dp<br>定义<code>dp[i][j]</code>，意思是指下标i到j的字符串是否为回文字符串。<br>该题目的<code>dp[i][j]</code>分为两种情况：</p><ul><li><p><code>dp[i][j]</code> == <code>true</code>，前提是<code>s[i] == s[j]</code>,也就是第i个字符与第j个字符相同。</p><ul><li><p><code>i</code>到<code>j</code>的子串长度小于3，则必为<code>true</code></p></li><li><p><code>dp[i+1][j-1]</code> == <code>true</code>,又有前提<code>s[i] == s[j]</code>，所以<code>dp[i][j] == true</code></p></li></ul></li><li><p><code>dp[i][j]</code> == <code>false</code>,其他情况都为<code>false</code>，例如不满足<code>s[i] == s[j]</code>即为<code>false</code></p></li></ul><p>分析完毕，剩余的工作就是遍历过程中需要记录最长子串的长度，以及<code>i</code>。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(n,vector&lt;<span class="keyword">int</span>&gt;(n));</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxl = <span class="number">1</span>,beginl = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">2</span>;l&lt;=n;l++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> j = l+i<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(s[i] != s[j]) dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j - i &lt; <span class="number">2</span>) dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j<span class="number">-1</span>])&#123;</span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j-i+<span class="number">1</span> &gt; maxl &amp;&amp; dp[i][j])&#123;</span><br><span class="line">                    maxl = j-i+<span class="number">1</span>;</span><br><span class="line">                    beginl = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(beginl,maxl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis_plus学习01</title>
      <link href="/2022/03/22/Mybatis/MybatisPlus01/"/>
      <url>/2022/03/22/Mybatis/MybatisPlus01/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-plus学习01"><a href="#Mybatis-plus学习01" class="headerlink" title="Mybatis_plus学习01"></a>Mybatis_plus学习01</h1><hr><p>Mybatis_plus基础配置</p><h2 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a><code>pom.xml</code>文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--连接数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mybatis_plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="pojo以及mapper接口配置"><a href="#pojo以及mapper接口配置" class="headerlink" title="pojo以及mapper接口配置"></a>pojo以及mapper接口配置</h2><p><code>User.java</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了lombok后可以轻松编写一个实体类<br><code>UserMapper.java</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在对应的mapper上面继承基本的类 BaseMapper</span></span><br><span class="line"><span class="meta">@Repository</span><span class="comment">//代表其为dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//继承BaseMapper后 CRUD操作都已经编写完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相较于Mybatis，Mybatis_Plus引进了一个BaseMapper父类，继承了这个类之后，简单的CRUD都可以自动编写完成，只需要开发者自己调用即可。</p><hr><h2 id="注册相关mapper"><a href="#注册相关mapper" class="headerlink" title="注册相关mapper"></a>注册相关mapper</h2><p>最后一步就是在启动类当中注册相应的mapper，如果没有注册，则无法调用相应的mapper。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.edu.ldu.mybatis_plus.mapper&quot;)</span><span class="comment">//扫描mapper文件夹</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="测试mapper"><a href="#测试mapper" class="headerlink" title="测试mapper"></a>测试mapper</h2><p>先上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承了BaseMapper，所有的方法都来自BaseMapper</span></span><br><span class="line"><span class="comment">//也可以扩展方法</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//queryWrapper指的是条件</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis/MybatisPlus学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习笔记3</title>
      <link href="/2022/03/22/Mybatis/Mybatis3/"/>
      <url>/2022/03/22/Mybatis/Mybatis3/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis学习笔记3"><a href="#Mybatis学习笔记3" class="headerlink" title="Mybatis学习笔记3"></a>Mybatis学习笔记3</h1><hr><h2 id="Mybatis注解开发"><a href="#Mybatis注解开发" class="headerlink" title="Mybatis注解开发"></a>Mybatis注解开发</h2><p>官方说法中有这么一句话<br>使用注解来映射==简单语句==会使代码显得更加简洁，但对于==稍微复杂==一点的语句，==Java 注解不仅力不从心==，还会让你本就复杂的 SQL 语句更加混乱不堪。 因此，如果你需要做一些很复杂的操作，==最好用 XML 来映射语句==</p><h3 id="常见的简单注解"><a href="#常见的简单注解" class="headerlink" title="- 常见的简单注解"></a>- 常见的简单注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where uid = #&#123;uid&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">selectUser</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="keyword">int</span> uid)</span></span>;</span><br></pre></td></tr></table></figure><p>写此类注解方法注意一点<br>参数有多个的时候，必须要使用<code>@Param</code>注解,以免sql注入混乱<br>关于<code>@param</code>注解:</p><ol><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上!</li><li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名!</li></ol><hr><p>使用注解时，须在==config文件==中注册相应的映射接口<br>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;cn.edu.ldu.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;cn.edu.ldu.dao.PersonMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;cn.edu.ldu.dao.IdCardMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Lombok-额外知识"><a href="#Lombok-额外知识" class="headerlink" title="- Lombok(额外知识)"></a>- Lombok(额外知识)</h3><p>废话不多说，先上一段英文<br><code>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java. Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</code></p><p>当然我的英语水平很有限，翻译翻译！</p><p>==译文==：Project Lombok是一个java库，它可以自动插入到编辑器和构建工具中，为java锦上添花。永远不要再编写另一个getter或equals方法，使用一个注释，你的类就有了一个全功能的构建器，自动化你的日志变量，等等。</p><p>意思就是我们再也不用去写实体类的<code>get</code>和<code>set</code>以及<code>toString</code>等等方法</p><p>使用步骤:</p><ol><li>先导入<code>Lombok</code>插件</li><li>导入<code>Lombok</code>maven工具(dependency)</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>实体类上加上<code>@Data</code>注解</li></ol><p>最后如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>==有没有觉得很哇塞，觉得很哇塞就给我点个赞呗==</strong><br>但是==请注意==!!!<br>Lombok中有很多的注解，<code>@Data</code>只是其中一种，有参构造和无参构造它只有无参构造，有参构造需要加上<code>@AllArgsConstructor</code>注解,但两种注解同时存在时则没有无参构造，则需加上<code>@NoArgsConstructor</code>注解。</p><p>额，我觉得你肯定有迷惑，自己可以去试试看嘛，Lombok相关注解很多的，你可以慢慢尝试。<br><a href="https://projectlombok.org/">Lombok官方</a></p><p>但就我而言，这对于初学者来说完全没有必要，还是得勤劳的写代码！</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis/MybatisPlus学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习笔记2</title>
      <link href="/2022/03/22/Mybatis/Mybatis2/"/>
      <url>/2022/03/22/Mybatis/Mybatis2/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis学习笔记2"><a href="#Mybatis学习笔记2" class="headerlink" title="Mybatis学习笔记2"></a>Mybatis学习笔记2</h1><hr><h2 id="Mybatis基础的增删改查"><a href="#Mybatis基础的增删改查" class="headerlink" title="Mybatis基础的增删改查"></a>Mybatis基础的增删改查</h2><p>mybatis基础的增删改查主要代码都在<code>mapper.xml</code>中</p><h3 id="增删改查-最基础-的代码"><a href="#增删改查-最基础-的代码" class="headerlink" title="- 增删改查==最基础==的代码"></a>- 增删改查==最基础==的代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--增，uid自增--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        insert into users(uname, uage) VALUES (#&#123;uname&#125;,#&#123;uage&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--删--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from users where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        update users set uname=#&#123;uname&#125;,uage=#&#123;uage&#125; where uid=#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--查--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from users where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码中，<code>parameterType</code>是==参数类型==，<code>resultType</code>是==返回结果类型==</p><h3 id="数据库字段与实体类字段不一致时"><a href="#数据库字段与实体类字段不一致时" class="headerlink" title="- 数据库字段与实体类字段不一致时"></a>- 数据库字段与实体类字段<strong>不一致</strong>时</h3><p>出现数据库字段与实体类字段不一致时，可使用==结果集映射==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from users where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改变后==resultType一定要改成resultMap==否则会报异常</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uage&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当前数据库<code>User</code>字段是<code>uid</code>,<code>uname</code>,<code>uage</code><br>当前实体类<code>User</code>字段是<code>id</code>,<code>name</code>,<code>age</code><br>当然如果只有部分字段不一致的话，只需要列出不一致的字段</p><h3 id="Mybatis分页处理"><a href="#Mybatis分页处理" class="headerlink" title="- Mybatis分页处理"></a>- Mybatis分页处理</h3><p>mybatis的分页一共分为三种</p><ol><li>limit分页</li></ol><p>这是MySQL最原生的分页处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询1</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br><span class="line"><span class="comment">//UserMapper.java</span></span><br><span class="line"></span><br><span class="line">&lt;!--    分页查询<span class="number">1</span>--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;getUserByLimit&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultMap=<span class="string">&quot;UserMap&quot;</span>&gt;</span><br><span class="line">    select * from users limit #&#123;startIndex&#125;,#&#123;pageIndex&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"><span class="comment">//UserMapper.xml</span></span><br></pre></td></tr></table></figure><p>代码中返回结果用==UserMap==替代，读者可自行修改。<br><code>startIndex</code>，<code>pageIndex</code>都是需要通过map传进去的参数<br>故<code>map</code>定义成<code>Map&lt;String,Integer&gt;</code></p><p>测试代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询1</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MyBatisUtils.getSession();</span><br><span class="line">    UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line">    HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageIndex&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span>(User user: list)&#123;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=<span class="number">7</span>, name=<span class="string">&#x27;Chris&#x27;</span>, age=<span class="number">18</span>&#125;</span><br><span class="line">User&#123;id=<span class="number">8</span>, name=<span class="string">&#x27;吴老师&#x27;</span>, age=<span class="number">60</span>&#125;</span><br><span class="line">User&#123;id=<span class="number">9</span>, name=<span class="string">&#x27;Chris&#x27;</span>, age=<span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>RowBounds分页</li></ol><p>RowBounds分页较limit分页比较冷门，但也是属于Mybatis中必须掌握的一种分页方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询2</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>RowBounds分页的方法中并==不需要参数传入==<br>且相应的sql语句也不需要<code>startIndex</code>和<code>pageIndex</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    分页查询2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from users</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相应的测试代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询2</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MyBatisUtils.getSession();</span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//通过java代码实现分页</span></span><br><span class="line">    List&lt;User&gt; list = session.selectList(<span class="string">&quot;cn.edu.ldu.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="keyword">null</span>,rowBounds);</span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中的<code>selectList</code>里面的第一个参数是方法的路径，第二个参数默认为空，第三个参数是<code>RowBounds</code>实体对象,在实体对象中可设置起始页和终止页。</p><ol start="3"><li>PageHelper分页</li></ol><p>一般在大公司中使用，尤其涉及到一些比较复杂的查询且数据量比较巨大，这个时候用前两种分页就不能满足日常需要。<br><a href="https://pagehelper.github.io/">PageHelper官方地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis/MybatisPlus学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习笔记1</title>
      <link href="/2022/03/12/Mybatis/Mybatis1/"/>
      <url>/2022/03/12/Mybatis/Mybatis1/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis学习笔记1"><a href="#Mybatis学习笔记1" class="headerlink" title="Mybatis学习笔记1"></a>Mybatis学习笔记1</h1><hr><h2 id="Mybatis配置文件知识"><a href="#Mybatis配置文件知识" class="headerlink" title="Mybatis配置文件知识"></a>Mybatis配置文件知识</h2><h3 id="config文件的环境配置"><a href="#config文件的环境配置" class="headerlink" title="- config文件的环境配置"></a>- config文件的环境配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 环境配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载类路径下的属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这里的==db.properties==是根目录的==resources==下建立的一个文件,<br>这个文件里面放的主要是<strong>数据库的连接信息</strong>，主要内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">mysql.url=jdbc:mysql:<span class="comment">//localhost:3306/mybatis?serverTimezone=UTC&amp;characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=true</span></span><br><span class="line">mysql.username=root</span><br><span class="line">mysql.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>以下是真正的<strong>环境配置主体代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接相关配置 ,db.properties文件中的内容--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://mybatis.net.cn/configuration.html#environments">Mybatis事务管理器</a>默认为JDBC, 其次是MANAGED<br>但是MANAGED一般不会用，因为所以科学道理，具体原因自行看官方文档</p><h3 id="实体类类型的别名配置"><a href="#实体类类型的别名配置" class="headerlink" title="- 实体类类型的别名配置"></a>- 实体类类型的别名配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;cn.edu.ldu.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==<code>type</code>==:实体类目录<br>==<code>alias</code>==:更改后的别名<br>配置之后，在Mapper.xml中编写查询语句时,<code>resultType</code>后面可以直接写别名</p><h3 id="mapper文件路径配置"><a href="#mapper文件路径配置" class="headerlink" title="- mapper文件路径配置"></a>- mapper文件路径配置</h3><p><a href="https://mybatis.net.cn/configuration.html#mappers">官方文档</a><br>一共分为三种</p><ul><li>使用相对于类路径的资源引用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三种映射中只有这一种==不需要mapper.xml文件与mapper.java文件在同一个路径==下，这种方法我觉得是最好的。<br>可方便管理mapper文件(.xml/.java)</p><ul><li>使用映射器接口实现类的完全限定类名</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;cn.edu.ldu.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;cn.edu.ldu.dao.PersonMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;cn.edu.ldu.dao.IdCardMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是使用注解接口时对应的映射，如果后期业务比较复杂，那么注解就不能满足我们sql语句的多重查询。</p><ul><li>将包内的映射器接口实现全部注册为映射器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优点：可以将这个包下所有的.xml注册为映射器<br>缺点：必须mapper.xml文件与mapper.java文件在同一目录下</p><h3 id="普通查询单个user语句"><a href="#普通查询单个user语句" class="headerlink" title="- 普通查询单个user语句"></a>- 普通查询单个user语句</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from users where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>普通的增删改查的语句基本与以上代码格式相同。<br>对于查询多条语句,返回结果为List/Map,可参照<a href="https://mybatis.net.cn/configuration.html#typeAliases">Mybatis官方文档</a><br>在<code>resultType</code>后补上。</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis/MybatisPlus学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题篇(1)-字典序的第K小数字</title>
      <link href="/2022/03/12/leetcode/LeetCode(1)/"/>
      <url>/2022/03/12/leetcode/LeetCode(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode刷题篇-1-字典序的第K小数字"><a href="#LeetCode刷题篇-1-字典序的第K小数字" class="headerlink" title="LeetCode刷题篇(1)-字典序的第K小数字"></a>LeetCode刷题篇(1)-字典序的第K小数字</h2><p><a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/">链接</a></p><p>题目：给定整数n和k，返回[1,n]中字典序第k小的数字。</p><p>首先我看到这道题目心里反正是一脸懵逼的，然后写了个时间复杂度超过O(n)的解法，然后就爆了<br>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; a;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthNumber</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            a.<span class="built_in">push_back</span>(<span class="built_in">to_string</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">        string s = a[k<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">atoi</span>(s.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看的出来我是通过先将[1,n]转为字符串，然后排序，根据k可找到该数字，可惜题目要求n最大为1e9,所以爆了。</p><p><strong>字典树的理解：</strong><br>根据字典序的排序是一个树的前序遍历，故这个树就是字典树。</p><p><strong>字典序的理解：</strong><br>简而言之，就是根据数字的前缀进行排序，比如 10 &lt; 9，因为 10 的前缀是 1，比 9 小。再比如 112 &lt; 12，因为 112 的前缀 11小于 12。<br>这样排序下来，会跟平常的升序排序会有非常大的不同。</p><p>然后这道题解法如下：<br>首先从节点1进入，当前节点设为n(i),右兄弟节点设为n(i+1)<br>分为两种情况：</p><ul><li><p><strong>当前n(i)下的节点数量 &gt; k</strong> : 则所要寻找的数字必定在n(i)节点下，因为本身一棵树的前序遍历就是按照字典序来的，故这种找法肯定对。</p></li><li><p><strong>当前n(i)下的节点数量 &lt;= k</strong> :<br>这种情况下我们就可以不必考虑第k小的数字在当前节点下了，并且将当前的节点(cur)加一，变为右兄弟节点。</p></li></ul><p>关键是如何求解一个节点下的节点数呢？</p><ul><li>当前节点是cur，则当前节点的右兄弟节点是cur+1，然后就是一层一层的遍历，并且右兄弟节点的左子孙也跟着一起遍历，知道当前节点下的子孙节点超出了n，则停止循环，即可得到节点数。</li></ul><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthNumber</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        k--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> left = cur,right = cur+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> step = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;=n)&#123;</span><br><span class="line">                step += <span class="built_in">min</span>((<span class="keyword">long</span> <span class="keyword">long</span>)n+<span class="number">1</span>,right) - left;</span><br><span class="line">                left *= <span class="number">10</span>;</span><br><span class="line">                right *= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(step &lt;= k)&#123;</span><br><span class="line">                cur++;</span><br><span class="line">                k -= step;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                k--;</span><br><span class="line">                cur *= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码之路</title>
      <link href="/2022/01/08/first/first/"/>
      <url>/2022/01/08/first/first/</url>
      
        <content type="html"><![CDATA[<h3 id="这个代码是我第一次写代码时调试了很久的代码"><a href="#这个代码是我第一次写代码时调试了很久的代码" class="headerlink" title="这个代码是我第一次写代码时调试了很久的代码"></a>这个代码是我第一次写代码时调试了很久的代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z,a,b,c;</span><br><span class="line"><span class="keyword">int</span> h,m,s;</span><br><span class="line"><span class="keyword">int</span> p,q,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d:%d:%d\n&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line"><span class="comment">//printf(&quot;%d:%d:%d\n&quot;,x,y,z);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d:%d:%d&quot;</span>,&amp;a,&amp;b,&amp;c); </span><br><span class="line">p=x*<span class="number">3600</span>+y*<span class="number">60</span>+z;</span><br><span class="line">q=a*<span class="number">3600</span>+b*<span class="number">60</span>+c;</span><br><span class="line"><span class="keyword">if</span>(p&gt;q)&#123;</span><br><span class="line">r=p-q;</span><br><span class="line">s=r%<span class="number">60</span>;</span><br><span class="line">h=r/<span class="number">3600</span>;</span><br><span class="line">m=(r-h*<span class="number">3600</span>-s)/<span class="number">60</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">r=q-p;</span><br><span class="line">s=r%<span class="number">60</span>;</span><br><span class="line">h=r/<span class="number">3600</span>;</span><br><span class="line">m=(r-h*<span class="number">3600</span>-s)/<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:%d:%d\n&quot;</span>,h,m,s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/03/hello-world/"/>
      <url>/2022/01/03/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Chris-Hello-World"><a href="#Chris-Hello-World" class="headerlink" title="Chris:Hello,World!"></a>Chris:Hello,World!</h2><p>You are Welcome!</p><p><strong>欢迎你来到我的Blog，来到这你就是我的朋友</strong><br><strong>本Blog主要记载的就是我本人的学习记录，以及相关的比较有趣的事情，欢迎关注！</strong></p><p><em>我是来自鲁东大学软件工程系19级的张文卓</em><br><em>本人爱好是敲代码，如果你是志同道合的朋友，欢迎加入Coding！</em><br><em>QQ:2455781639(表明来意)</em></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
